/*
An application at Amazon is deployed on n servers connected linearly.
The vulnerability of the ith server is given by vulnerability[i].
The system vulnerability of a contiguous segment of servers, i.e., a subsegment, is defined as the
product of the number of servers and the maximum vulnerability of the servers in that segment.

Given the array vulnerability, find the sum of system vulnerabilities over all the subsegments of servers.
Since the answer can be large, report it modulo 10^9 + 7.
*/

#include <bits/stdc++.h>

#define MOD 1000000007

using namespace std;

typedef pair<int, int> pii;

int n;
vector<pii> vulnerability;

void read() {
    cin >> n;
    vulnerability.resize(n);
    for (int i=0; i<n; i++) {
        int val; cin >> val;
        vulnerability[i] = make_pair(i, val);
    }
}
 
void solve() {
    int solution = 0;
    vector<int> subsolutions(n, 0); 
    vector<int> sumsleaders(n, 0);
    std::stack<pii> leaders; // first -> pos, second -> value
    for (int i=0; i<n; i++) {
        //Check if greater
        pii top;
        while(!leaders.empty() && (top = leaders.top()).second < vulnerability[i].second) {
            leaders.pop();
        }
        int z = vulnerability[i].second; 
        if (leaders.empty()) { // Current value is the maximum of all values
            subsolutions[i] = ((i+1) * (z + (z*(i+1))))/2;
            sumsleaders[i] = z;
        } else {
            subsolutions[i] += sumsleaders[leaders.top().first] * (i - leaders.top().first) + subsolutions[leaders.top().first];
            // Arithmetic series
            int n = (i - leaders.top().first);
            subsolutions[i] += (n * (z + (z*n)))/2;
            sumsleaders[i] = z + sumsleaders[leaders.top().first];
        }
        leaders.push(vulnerability[i]);
    }
    for (int i=0; i<n; i++) {
        solution += subsolutions[i];
    }
    cout << solution << endl;
}  

int main() {
    read();
    solve();
}